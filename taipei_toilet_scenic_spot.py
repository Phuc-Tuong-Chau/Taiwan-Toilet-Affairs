# -*- coding: utf-8 -*-
"""Taipei Toilet_Scenic Spot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TaDQLgaQsizOwAlgfRmk0_HNaqx5toC7
"""

import pandas as pd

data = pd.read_csv("/content/Taiwan_Toilet_sorted_utf8_bom.csv")

Taipei_Toilet = data[data['city'] == '臺北市']

Taipei_Toilet = Taipei_Toilet.drop(columns=['total_population', 'population_density'])

Taipei_Toilet

Taipei_Toilet.to_csv('Taipei_Toilet.csv', index=False, encoding ="utf-8-sig")

from google.colab import files

# Download the CSV file
files.download('Taipei_Toilet.csv')

sight = pd.read_csv("/content/tourists.csv")

sight

sight = pd.read_csv("/content/tourists.csv")

sight

sight = sight.transpose()

sight

sight.to_csv('tourists.csv', index=False, encoding ="utf-8-sig")

from google.colab import files

# Download the CSV file
files.download('tourists.csv')

sight = sight.rename(columns={'112年': 'Toursit_Number'})

sight

def dms_to_decimal(dms_str):
    # 提取度、分、秒和方向
    parts = dms_str.split()
    lat_dms = parts[0].replace("°", " ").replace("′", " ").replace("″N", "")
    lon_dms = parts[1].replace("°", " ").replace("′", " ").replace("″E", "")

    lat_parts = list(map(float, lat_dms.split()))
    lon_parts = list(map(float, lon_dms.split()))

    # 計算十進制格式
    lat_decimal = lat_parts[0] + lat_parts[1] / 60 + lat_parts[2] / 3600
    lon_decimal = lon_parts[0] + lon_parts[1] / 60 + lon_parts[2] / 3600

    return lat_decimal, lon_decimal

# 測試轉換函數
dms_str = "25°04′21″N 121°31′29″E"
lat_decimal, lon_decimal = dms_to_decimal(dms_str)
print("Latitude in decimal:", lat_decimal)
print("Longitude in decimal:", lon_decimal)

import folium
import pandas as pd
import numpy as np


file_path = '/content/tourists_with_boundaries.csv'
data = pd.read_csv(file_path, encoding='utf-8-sig')

# create the map
map_center = [data['Latitude'].mean(), data['Longitude'].mean()]
mymap = folium.Map(location=map_center, zoom_start=12)

# mark the area of walking distance
for _, row in data.iterrows():
    location = [row['Latitude'], row['Longitude']]
    folium.Marker(location, popup=row['Sight']).add_to(mymap)
    folium.Circle(location, radius=400, color='blue', fill=True, fill_opacity=0.2).add_to(mymap)
    # rectangle boundarie
    #folium.Rectangle(
     #   bounds=[[row['Latitude Min'], row['Longitude Min']], [row['Latitude Max'], row['Longitude Max']]],
      #  color='red', fill=True, fill_opacity=0.1
    #).add_to(mymap)

mymap

tourists = pd.read_csv("/content/tourists_with_boundaries_en.csv")

tourists

Taipei_Toilet

"""#**All Public Toilets in Taipei**#"""

import folium
import pandas as pd
import numpy as np


# Haversine公式计算两点间距离
def haversine(lat1, lon1, lat2, lon2):
    R = 6371000  # 地球半径，单位为米
    phi1 = np.radians(lat1)
    phi2 = np.radians(lat2)
    delta_phi = np.radians(lat2 - lat1)
    delta_lambda = np.radians(lon2 - lon1)
    a = np.sin(delta_phi / 2) ** 2 + np.cos(phi1) * np.cos(phi2) * np.sin(delta_lambda / 2) ** 2
    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))
    return R * c

# 检查每个厕所是否在400米范围内
results = []
for _, toilet in Taipei_Toilet.iterrows():
    toilet_lat = toilet['latitude']
    toilet_lon = toilet['longitude']
    within_range = False
    for _, tourist in tourists.iterrows():
        tourist_lat = tourist['Latitude']
        tourist_lon = tourist['Longitude']
        distance = haversine(toilet_lat, toilet_lon, tourist_lat, tourist_lon)
        if distance <= 400:
            within_range = True
            break
    results.append(within_range)

Taipei_Toilet['Within 400m Range'] = results

# 创建地图对象
map_center = [tourists['Latitude'].mean(), tourists['Longitude'].mean()]
mymap = folium.Map(location=map_center, zoom_start=12)

# 添加景点标记
for _, row in tourists.iterrows():
    location = [row['Latitude'], row['Longitude']]
    folium.Marker(location, popup=row['Sight'], icon=folium.Icon(color='blue')).add_to(mymap)

# 添加厕所标记，区分在范围内和不在范围内的厕所
for _, row in Taipei_Toilet.iterrows():
    location = [row['latitude'], row['longitude']]
    color = 'green' if row['Within 400m Range'] else 'red'
    folium.Marker(location, popup=row['name'], icon=folium.Icon(color=color)).add_to(mymap)

# 显示地图
# 保存地图为HTML文件
mymap.save('tourists_toilets_map.html')

# 下载HTML文件
from google.colab import files
files.download('tourists_toilets_map.html')

tourists

Taipei_Toilet = pd.read_csv('/content/Taipei_Toilet_new.csv')

Taipei_Toilet

import pandas as pd

"""# **Sight + Toilets in 400m**"""

import folium
import pandas as pd
import numpy as np



# Haversine
def haversine(lat1, lon1, lat2, lon2):
    R = 6371000  #radius of Earth in meter
    phi1 = np.radians(lat1)
    phi2 = np.radians(lat2)
    delta_phi = np.radians(lat2 - lat1)
    delta_lambda = np.radians(lon2 - lon1)
    a = np.sin(delta_phi / 2) ** 2 + np.cos(phi1) * np.cos(phi2) * np.sin(delta_lambda / 2) ** 2
    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))
    return R * c

# check if all toilets are within 400m
within_range_toilets = []
for _, toilet in Taipei_Toilet.iterrows():
    toilet_lat = toilet['latitude']
    toilet_lon = toilet['longitude']
    within_range = False
    for _, tourist in tourists.iterrows():
        tourist_lat = tourist['Latitude']
        tourist_lon = tourist['Longitude']
        distance = haversine(toilet_lat, toilet_lon, tourist_lat, tourist_lon)
        if distance <= 400:
            within_range = True
            break
    if within_range:
        within_range_toilets.append(toilet)

# toilets  within 400m
within_range_toilets_df = pd.DataFrame(within_range_toilets)

# create a map
map_center = [tourists['Latitude'].mean(), tourists['Longitude'].mean()]
mymap = folium.Map(location=map_center, zoom_start=12)

# circle
for _, row in tourists.iterrows():
    location = [row['Latitude'], row['Longitude']]
    folium.Marker(location, popup=row['Sight'], icon=folium.Icon(color='blue')).add_to(mymap)
    folium.Circle(location, radius=400, color='blue', fill=False).add_to(mymap)

# mark toilets
for _, row in within_range_toilets_df.iterrows():
    location = [row['latitude'], row['longitude']]
    folium.Marker(location, popup=row['name'], icon=folium.Icon(color='green')).add_to(mymap)

# save
mymap.save('final_map_updated.html')

# download
from google.colab import files
files.download('final_map_updated.html')

import pandas as pd
import numpy as np




# Haversine
def haversine(lat1, lon1, lat2, lon2):
    R = 6371000  # 地球半径，单位为米
    phi1 = np.radians(lat1)
    phi2 = np.radians(lat2)
    delta_phi = np.radians(lat2 - lat1)
    delta_lambda = np.radians(lon2 - lon1)
    a = np.sin(delta_phi / 2) ** 2 + np.cos(phi1) * np.cos(phi2) * np.sin(delta_lambda / 2) ** 2
    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))
    return R * c

# 计算每个景点400米范围内的厕所数量
tourists['Toilet Count'] = 0
for idx, tourist in tourists.iterrows():
    tourist_lat = tourist['Latitude']
    tourist_lon = tourist['Longitude']
    count = 0
    for _, toilet in Taipei_Toilet.iterrows():
        toilet_lat = toilet['latitude']
        toilet_lon = toilet['longitude']
        distance = haversine(tourist_lat, tourist_lon, toilet_lat, toilet_lon)
        if distance <= 400:
            count += 1
    tourists.at[idx, 'Toilet Count'] = count

# 仅输出包含景点名称和厕所数量的DataFrame
toilet_count_df = tourists[['Sight', 'Toilet Count']]


toilet_count_df